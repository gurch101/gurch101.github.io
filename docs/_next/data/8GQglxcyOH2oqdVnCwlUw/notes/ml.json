{"pageProps":{"post":{"id":"ml","title":"Machine Learning Notes","category":"notes","description":"Machine Learning Notes","type":"notes","date":"Thu Jan 14 2021","contentHtml":"<h1>Machine Learning</h1>\n<h2>Coursera Machine Learning Course 1</h2>\n<p>Give computers the ability to learn without being explicitly programmed</p>\n<p>Supervised Learning</p>\n<ul>\n<li>used most in real-world applications and has seen rapid advancements</li>\n<li>algorithms that learn input to output mappings given input/output examples to learn from.</li>\n<li>regression: predict a number amongst infinitely many possible outputs\n<ul>\n<li>housing prices</li>\n</ul>\n</li>\n<li>classification: predict a finite number of categories\n<ul>\n<li>tumor classification</li>\n</ul>\n</li>\n</ul>\n<p>Unsupervised Learning</p>\n<ul>\n<li>given inputs but not outputs - goal is to find something interesting in unlabeled data</li>\n<li>recommender systems/reinforcement learning</li>\n<li>clustering: group together similar data\n<ul>\n<li>similar news articles</li>\n<li>DNA microarray clustering</li>\n<li>customer/market segmentation</li>\n</ul>\n</li>\n<li>anomaly detection: find unusual data points</li>\n<li>dimensionality reduction: compress data using fewer numbers</li>\n</ul>\n<h3>Linear Regression</h3>\n<ul>\n<li>\n<p>Plot data on x/y plot. Add line of best fit, use formula for line to predict other inputs.</p>\n</li>\n<li>\n<p>Also useful to put data in a table where inputs/outputs are separate columns.</p>\n</li>\n<li>\n<p>training set: input and output dataset used to train the model</p>\n</li>\n<li>\n<p>x = input variable/feature</p>\n</li>\n<li>\n<p>y = output variable/target</p>\n</li>\n<li>\n<p>m = number of training examples</p>\n</li>\n<li>\n<p>(x, y) = single training example</p>\n</li>\n<li>\n<p>w/b are model parameters (coefficients/weights)</p>\n</li>\n<li>\n<p>given a training set, and a learning algorithm, generate a function that can predict y given x</p>\n</li>\n<li>\n<p>fwb(x) = wx + b</p>\n</li>\n</ul>\n<h3>Sum of Squared Error</h3>\n<ul>\n<li>goal of cost function is to find w,b such that y prediction is close to y target for all (x,y)</li>\n<li>squared error cost function: J(w,b) = 1 / 2m * sum((ypred - ytarget) ^ 2)</li>\n<li>divide by 2m so that we dont get bigger errors for a larger training set. Using 2 makes the gradient descent derivative cleaner.</li>\n<li>square the error so that the sum doesnt go to zero when -ve/+ve errors are added together</li>\n<li>goal is to minimize J(w,b)</li>\n<li>a line in the model graph is a point on the cost graph</li>\n</ul>\n<p>Simple example where b = 0</p>\n<p><img src=\"/images/sse.png\" alt=\"Sum of Squared Errors Graph\"></p>\n<p>w and b - sum of squared error cost function for linear regression will always be bowl shaped\n<img src=\"/images/contour.png\" alt=\"Contour Graph\"></p>\n<h3>Gradient Descent</h3>\n<ul>\n<li>\n<p>Used to find w, b that minimizes J(w,b). Gradient descent can be used to minimize any function. Finds local minima.</p>\n</li>\n<li>\n<p>Algorithm:</p>\n<ul>\n<li>\n<p>start with some w,b (for linear regression, use 0,0)</p>\n</li>\n<li>\n<p>keep changing w,b to reduce J(w,b)</p>\n<ul>\n<li>w = w - a * d/dwJ(w,b)</li>\n<li>b = b - a * d/dbJ(w,b)</li>\n<li>a = learning rate (between 0 and 1). Controls the size of the \"step\" taken when changing a parameter</li>\n</ul>\n</li>\n<li>\n<p>repeat until w/b no longer change much</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/gradientdescent.png\" alt=\"Gradient Descent\"></p>\n<p><img src=\"/images/gradientdescentformula.png\" alt=\"Formula\"></p>\n<p>If the learning rate is too large, it might never converge and may get further from the minimum. If too small, it will take very long.</p>\n<p>Even when using a fixed learning rate, each update step is smaller since the slope is smaller as we approach the local minima.</p>\n<p>For sum of squared errors, gradient descent will always find the global minimum.</p>\n<p>Batch gradient descent looks at all training examples.</p>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\nx_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ny_train <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">300.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500.0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nw <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\ntmp_f_wb <span class=\"token operator\">=</span> compute_model_output<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> tmp_f_wb<span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Our Prediction'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> y_train<span class=\"token punctuation\">,</span> marker<span class=\"token operator\">=</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'Actual Values'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Housing Prices'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Price (in 1000s of dollars)'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">'Size (1000 sqft)'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compute_model_output</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># m is the number of training examples</span>\n    m <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># alt is len(x_train)</span>\n    f_wb <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        f_wb<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w <span class=\"token operator\">*</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> f_wb\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compute_cost</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  m <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  cost_sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f_wb <span class=\"token operator\">=</span> w <span class=\"token operator\">*</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> b\n    cost <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f_wb <span class=\"token operator\">-</span> y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">**</span> <span class=\"token number\">2</span>\n    cost_sum <span class=\"token operator\">=</span> cost_sum <span class=\"token operator\">+</span> cost\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cost_sum\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">compute_gradient</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  m <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  dj_dw <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  dj_db <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f_wb <span class=\"token operator\">=</span> w <span class=\"token operator\">*</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> b\n    dj_dw_i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f_wb <span class=\"token operator\">-</span> y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    dj_db_i <span class=\"token operator\">=</span> f_wb <span class=\"token operator\">-</span> y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    dj_db <span class=\"token operator\">+=</span> dj_db_i\n    dj_dw <span class=\"token operator\">+=</span> dj_dw_i\n  dj_dw <span class=\"token operator\">=</span> dj_dw<span class=\"token operator\">/</span>m\n  dj_db <span class=\"token operator\">=</span> dj_db<span class=\"token operator\">/</span>m\n  <span class=\"token keyword\">return</span> dj_dw<span class=\"token punctuation\">,</span> dj_db\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">gradient_descent</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w_in<span class=\"token punctuation\">,</span> b_in<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">,</span> num_iters<span class=\"token punctuation\">,</span> cost_function<span class=\"token punctuation\">,</span> gradient_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  w <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>w_in<span class=\"token punctuation\">)</span>\n  J_history <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  p_history <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  b <span class=\"token operator\">=</span> b_in\n  w <span class=\"token operator\">=</span> w_in\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_iters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dj_dw<span class=\"token punctuation\">,</span> dj_db <span class=\"token operator\">=</span> gradient_function<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    b <span class=\"token operator\">=</span> b <span class=\"token operator\">-</span> alpha <span class=\"token operator\">*</span> dj_db\n    w <span class=\"token operator\">=</span> w <span class=\"token operator\">-</span> alpha <span class=\"token operator\">*</span> dj_dw\n\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">:</span>\n      J_history<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cost_function<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      p_history<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> w<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> J_history<span class=\"token punctuation\">,</span> p_history\n\n\n<span class=\"token comment\"># initialize parameters</span>\nw_init <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nb_init <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\"># some gradient descent settings</span>\niterations <span class=\"token operator\">=</span> <span class=\"token number\">10000</span>\ntmp_alpha <span class=\"token operator\">=</span> <span class=\"token number\">1.0e-2</span>\n<span class=\"token comment\"># run gradient descent</span>\nw_final<span class=\"token punctuation\">,</span> b_final<span class=\"token punctuation\">,</span> J_hist<span class=\"token punctuation\">,</span> p_hist <span class=\"token operator\">=</span> gradient_descent<span class=\"token punctuation\">(</span>x_train <span class=\"token punctuation\">,</span>y_train<span class=\"token punctuation\">,</span> w_init<span class=\"token punctuation\">,</span> b_init<span class=\"token punctuation\">,</span> tmp_alpha<span class=\"token punctuation\">,</span>\n                                                    iterations<span class=\"token punctuation\">,</span> compute_cost<span class=\"token punctuation\">,</span> compute_gradient<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"(w,b) found by gradient descent: (</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>w_final<span class=\"token punctuation\">:</span><span class=\"token format-spec\">8.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>b_final<span class=\"token punctuation\">:</span><span class=\"token format-spec\">8.4f</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>Decision Trees</h3>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeRegressor\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_absolute_error\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\n\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># get percentiles, mean, std of each column</span>\ndata<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># list all columns</span>\ndata<span class=\"token punctuation\">.</span>columns\n\n<span class=\"token comment\"># get predictive column</span>\ny <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>Price\n\n<span class=\"token comment\"># get features</span>\nX <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'Rooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bathroom'</span><span class=\"token punctuation\">.</span> <span class=\"token string\">'Landsize'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># show first bunch of rows</span>\nX<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ntrain_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> random_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_mae</span><span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token punctuation\">,</span> train_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># random_state ensures same results for each run, max_leaf_nodes is used to control tree depth</span>\n    <span class=\"token comment\"># too deep = overfitting, too shallow = underfitting</span>\n    model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_leaf_nodes<span class=\"token operator\">=</span>max_leaf_nodes<span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>\n    preds_val <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># abs(predicted - actual) / N</span>\n    mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span> preds_val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>mae<span class=\"token punctuation\">)</span>\n\ncandidate_max_leaf_nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Write loop to find the ideal tree size from candidate_max_leaf_nodes</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> leaf_size<span class=\"token punctuation\">:</span> get_mae<span class=\"token punctuation\">(</span>leaf_size<span class=\"token punctuation\">,</span> train_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> leaf_size <span class=\"token keyword\">in</span> candidate_max_leaf_nodes<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Store the best value of max_leaf_nodes (it will be either 5, 25, 50, 100, 250 or 500)</span>\nbest_tree_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># now that all param decisions are made, fit to entire dataset</span>\nfinal_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token operator\">=</span>best_tree_size<span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nfinal_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n</code></pre></div>\n<h3>Random Forests</h3>\n<p>A random forest uses many trees and makes predictions by averaging the prediction of each tree</p>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestRegressor\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_absolute_error\n\nforest_model <span class=\"token operator\">=</span> RandomForestRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nforest_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>\nmelb_preds <span class=\"token operator\">=</span> forest_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span> melb_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h1>Pandas</h1>\n<h3>I/O</h3>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\noutput <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">:</span> test_data<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span>\n                       <span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">:</span> test_preds<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noutput<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'submission.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>Common Operations</h3>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># table with two rows, columns YES and NO</span>\n<span class=\"token comment\"># index is the row label, if not provided, uses 0...n-1 by default</span>\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Yes'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">131</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Product 1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Product 2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># sequence/list of values, can be thought of as single column</span>\npd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'2015 sales'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2016 sales'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Product Sales'</span><span class=\"token punctuation\">)</span>\n\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/csv.csv'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token operator\">&#x3C;</span><span class=\"token number\">0</span> to n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># (&#x3C;rows>, &#x3C;columns>)</span>\ndata<span class=\"token punctuation\">.</span>shape\n\ndata<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/write.csv'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># column access</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'column name'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># row access</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'column name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># first three rows of first column</span>\ndata<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># first three rows of column name</span>\ndata<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'column name'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># all rows for n columns</span>\ndata<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'col1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'col2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># change the index</span>\ndata<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'col1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># querying</span>\ndata<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'foobar'</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'colX'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>val1<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'colN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>notnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'col2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'col3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># assignment</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'FOO'</span>\n\n<span class=\"token comment\"># if numerical, shows percentiles</span>\n<span class=\"token comment\"># if string, shows uniques, top, count</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># frequency table</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># alt for above</span>\ndata<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># returns all unique values in col</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># doesnt mutate existing data frame</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> v<span class=\"token punctuation\">:</span> v <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># equiv to above</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># the index of the row with the max col name</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># calls func_name with row</span>\n<span class=\"token comment\"># if axis='index', calls func_name for each column</span>\n<span class=\"token comment\"># returns new dataframe, doesn't mutate existing</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token string\">'columns'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># min price for each point category</span>\nreviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># best wine for country/province</span>\nreviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'province'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> df<span class=\"token punctuation\">:</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nreviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># make multi-index back to single index</span>\ncountries_reviewed <span class=\"token operator\">=</span> reviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'province'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncountries_reviewed <span class=\"token operator\">=</span> countries_reviewed<span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncountries_reviewed<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token string\">'len'</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\ncountries_reviewed<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'len'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nbest_rating_per_price <span class=\"token operator\">=</span> reviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sort_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># strings are of type object</span>\nreviews<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dtype\n<span class=\"token comment\"># data frame of column -> type</span>\nreviews<span class=\"token punctuation\">.</span>dtypes\n<span class=\"token comment\"># cast column to another type</span>\nreviews<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span><span class=\"token string\">'float64'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># get all reviews with null column</span>\nreviews<span class=\"token punctuation\">[</span>pd<span class=\"token punctuation\">.</span>isnull<span class=\"token punctuation\">(</span>reviews<span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nreviews<span class=\"token punctuation\">.</span>country<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span><span class=\"token string\">'some val'</span><span class=\"token punctuation\">)</span>\nreviews<span class=\"token punctuation\">.</span>country<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">'from'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'to'</span><span class=\"token punctuation\">)</span>\n\nreviews<span class=\"token punctuation\">.</span>rename<span class=\"token punctuation\">(</span>columns<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'somethingelse'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># put labels on each axis</span>\nreviews<span class=\"token punctuation\">.</span>rename_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"wines\"</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token string\">'rows'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rename_axis<span class=\"token punctuation\">(</span><span class=\"token string\">\"fields\"</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token string\">'columns'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># combine rows of df1 and df2 in new df</span>\npd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>df1<span class=\"token punctuation\">,</span> df2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nleft <span class=\"token operator\">=</span> canadian_youtube<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trending_date'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nright <span class=\"token operator\">=</span> british_youtube<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trending_date'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nleft<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> lsuffix<span class=\"token operator\">=</span><span class=\"token string\">'_CAN'</span><span class=\"token punctuation\">,</span> rsuffix<span class=\"token operator\">=</span><span class=\"token string\">'_UK'</span><span class=\"token punctuation\">)</span>\npowerlifting_combined <span class=\"token operator\">=</span> powerlifting_meets<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">\"MeetID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>powerlifting_competitors<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">\"MeetID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>next:\nhttps://developers.google.com/machine-learning/crash-course</p>\n<p>https://course.fast.ai/</p>\n<p>https://courses.dataschool.io/</p>\n<p>https://www.coursera.org/learn/machine-learning</p>\n<h3>Problems</h3>\n<p>use speech recognition principles to build a wav -> midi maker</p>\n"}},"__N_SSG":true}