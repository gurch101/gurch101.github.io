{"pageProps":{"post":{"id":"lc","title":"LeetCode","category":"summary","description":"LeetCode Review","type":"notes","date":"Sat Oct 09 2021","contentHtml":"<h3>Two Sum</h3>\n<p>Use a map to store the the index of each number, check if remainder exists.</p>\n<h3>Sum Without Arithmetic Operators</h3>\n<p>&#x26; tells you bitwise carry, ^ tells you bitwise sum, set y to carry &#x3C;&#x3C; 1, continue until y = 0</p>\n<h3>Best time to buy/sell stock</h3>\n<p>keep track of minprice, update max price to be max(profit, curPrice - minprice)</p>\n<h3>Contains duplicate</h3>\n<p>keep numbers in a set, check if val already exists in set</p>\n<h3>Hamming Weight</h3>\n<p>num &#x26; 1, shift n >> 1, repeat 32 times</p>\n<h3>Product of all numbers except self</h3>\n<p>maintain two arrays of running product from left and running product from right, then answer is product of left[i - 1] * right.reverse()[i + 1]</p>\n<p>alt:</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">productExceptSelf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// get length of array</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// Initiailze ans to store the result</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// we know that the product of any element in nums = </span>\n        <span class=\"token comment\">// product[left elements] * product[right elements]</span>\n        <span class=\"token comment\">// we need to compute the right product of each index of nums</span>\n        <span class=\"token comment\">// and just use ans to store this temporary result. </span>\n        <span class=\"token comment\">// Base Case : Since right produce of the right most element is 1. </span>\n        ans<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// for each remaining elements compute right product.</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// left product can be tracked using a single pointer and </span>\n        <span class=\"token comment\">// updating it with every iteration.</span>\n        <span class=\"token keyword\">int</span> lp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&#x3C;</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// replace right product in ans with both left and right products. </span>\n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lp <span class=\"token operator\">*</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            lp <span class=\"token operator\">=</span> lp <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Counting Bits</h3>\n<p>number of bits in ABCD = number of bits in ABC + number of bits in D</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">arr[i] = arr[i &#x26;gt;&#x26;gt;&#x26;gt; 1] + (i &#x26;amp; 1)</code></pre></div>\n<h3>Climb Stairs</h3>\n<p>recursion + memoization</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Clone Graph</h3>\n<p>DFS</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cloneGraph</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nodeClones <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> toVisit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>toVisit<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> curr <span class=\"token operator\">=</span> toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword control-flow\">return</span> nodeClones<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Reverse a Linked List</h3>\n<p>Maintain pointers to tail, oldHead, newHead. Draw a diagram</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">curr <span class=\"token operator\">=</span> a\nnewHead <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\noldHead <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">&#x26;&#x26;</span> curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    newHead <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">;</span>\n    curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">;</span>\n    newHead<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> oldHead<span class=\"token punctuation\">;</span>\n    oldHead <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">return</span> newHead<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Set Matrix Zeroes</h3>\n<p>use first row/col as indicator whether row/col should be made zero. Keep track of whether the first col/row should be made zero. Create helper functions to make row/col by index zero.</p>\n<h3>Max SubArray</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxSubArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    maxSum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    curSum <span class=\"token operator\">=</span> maxSum<span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        curSum <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> curSum <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        maxSum <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>maxSum<span class=\"token punctuation\">,</span> curSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> maxSum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Max Depth of Binary Tree</h3>\n<p>recursion - max(maxDepth of left, maxDepth of right) + 1</p>\n<h3>Coin Change</h3>\n<p>given a bag of coins and an amount, find the minimum number of coins needed to make amount where dupe coins are allowed.</p>\n<p>dp problem where you keep track of min number of coins for each amount 0 to amount</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">coinChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">coins<span class=\"token punctuation\">,</span> amount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> amount <span class=\"token operator\">+</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> amount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&#x3C;</span> coins<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>coins<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;=</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> coins<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> dp<span class=\"token punctuation\">[</span>amount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Insert Interval</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> intervals<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newInterval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> ans<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//Add all pairs less than newInterval</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&#x3C;</span>intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&#x3C;</span>newInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        \n        \n        <span class=\"token comment\">// I have come here that means i have found the position to add newInterval</span>\n        \n        <span class=\"token comment\">//CASE 1 --> When newInterval is the first element to get added in ans or it is not merging with any element</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>newInterval<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>newInterval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//merging</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lastinterval<span class=\"token operator\">=</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            lastinterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lastinterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>newInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// CASE 2--> Now since newIterval has been added but the remaining intervals are left so lets add them up in ans</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&#x3C;</span>intervals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lastInterval<span class=\"token operator\">=</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lastInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                  <span class=\"token comment\">//merging</span>\n               lastInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lastInterval<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                      ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>intervals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Linked List Cycle</h3>\n<p>use fast and slow pointer. Proof - if fast is one behind, it will equal slow on next iteration; fast can't be one ahead because they would've been on the same node on the previous iteration.</p>\n<h3>Spiral Matrix</h3>\n<p>maintain count of num visited - loop until all visited (matrix.length * matrix[0].length), maintain flags for direction and min/max indices for range</p>\n<h3>Length of longest non-repeating substring</h3>\n<p>keep track of start and index of most recent occurence of char</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">lengthOfLongestSubstring</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> maxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> indices <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&#x3C;</span> s<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// if we haven't encountered the char, increment length</span>\n        <span class=\"token comment\">// or if we encountered the char outside the start of the window, increment length</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>indices<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span> <span class=\"token operator\">||</span> indices<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            maxLength <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>maxLength<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// new start is 1 + last occurence of char</span>\n            start <span class=\"token operator\">=</span> indices<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// +1 since we have zero based indices</span>\n            length <span class=\"token operator\">=</span> cur <span class=\"token operator\">-</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        indices<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n        cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>maxLength<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Missing Number</h3>\n<p>summation formula OR iterate from 1 - n: total += i - this is still O(n).</p>\n<h3>Max Product</h3>\n<p>iterate in both directions, keep track of max, reset running product whenever zero is encountered</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxProduct</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> max<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">let</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        product <span class=\"token operator\">*=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        max <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        product <span class=\"token operator\">*=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        max <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> product <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Find Minimum in Rotated Sorted Array</h3>\n<p>use binary search, check if on pivot point, return val, else check if pivot is in the left or the right.</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findMin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> hi <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> minVal <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>lo <span class=\"token operator\">&#x3C;</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mid <span class=\"token operator\">=</span> lo <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        minVal <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>minVal<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&#x26;&#x26;</span> nums<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;=</span> minVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">return</span> nums<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lo <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                hi <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword control-flow\">return</span> minVal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Search in Rotated Sorted Array</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isRotationOnLeft</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> hi</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isRotationOnRight</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> hi</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">search</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> hi <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>lo <span class=\"token operator\">&#x3C;=</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mid <span class=\"token operator\">=</span> lo <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isRotationOnLeft</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">&#x3C;=</span> nums<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                hi <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isRotationOnRight</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x26;&#x26;</span> target <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                hi <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lo <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            hi <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>3Sum</h3>\n<p>traps: javascript sort casts each element to string before sorting!</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">threeSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> triplets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> uniques <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    nums<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> firstNum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">&#x3C;</span> end <span class=\"token operator\">&#x26;&#x26;</span> start <span class=\"token operator\">&#x3C;</span> nums<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> firstNum <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>uniques<span class=\"token punctuation\">[</span>firstNum <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    triplets<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>firstNum<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    uniques<span class=\"token punctuation\">[</span>firstNum <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n                end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> triplets<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Container with most water</h3>\n<p>two pointers in an array</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxArea</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> curMax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> lo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> hi <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>lo <span class=\"token operator\">&#x3C;</span> hi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> curHeight <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">min</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> curLength <span class=\"token operator\">=</span> hi <span class=\"token operator\">-</span> lo<span class=\"token punctuation\">;</span>\n        curMax <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">max</span><span class=\"token punctuation\">(</span>curMax<span class=\"token punctuation\">,</span> curHeight <span class=\"token operator\">*</span> curLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// keep the tallest side fixed</span>\n        <span class=\"token comment\">// if we kept the shortest side fixed, we would have a shorter height and shorter width which is guaranteed less that curMax</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> height<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hi<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n            lo<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword control-flow\">return</span> curMax<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Reverse Bits</h3>\n<p>num >>> 0 gets twos complement of a negative number</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reverseBits</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> rev <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> bit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>bit <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rev <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">31</span> <span class=\"token operator\">-</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        bit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> rev <span class=\"token operator\">>>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Course Schedule</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">canFinish</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">numCourses<span class=\"token punctuation\">,</span> prerequisites</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> inboundCts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> toVisit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// build graph</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> prerequisites<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword module\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> prerequisites<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        g<span class=\"token punctuation\">[</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        g<span class=\"token punctuation\">[</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        g<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        inboundCts<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inboundCts<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        inboundCts<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// initial nodes to visit are those with no pre-reqs</span>\n    <span class=\"token keyword\">const</span> nodes <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> nodes<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>inboundCts<span class=\"token punctuation\">[</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> numVisited <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>toVisit<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        numVisited<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> g<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> neighbor <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            inboundCts<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>inboundCts<span class=\"token punctuation\">[</span>neighbor<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>neighbor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// count those without any pre-reqs as visited</span>\n    <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> numCourses<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            numVisited<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">return</span> numVisited <span class=\"token operator\">===</span> numCourses<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n"}},"__N_SSG":true}