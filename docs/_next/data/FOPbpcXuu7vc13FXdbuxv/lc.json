{"pageProps":{"post":{"id":"lc","title":"Leetcode","category":"summary","description":"Leetcode Review","type":"notes","date":"Sat Oct 09 2021","contentHtml":"<h1>LeetCode</h1>\n<h3>Two Sum</h3>\n<p>Use a map to store the the index of each number, check if remainder exists.</p>\n<h3>Sum Without Arithmetic Operators</h3>\n<p>&#x26; tells you bitwise carry, ^ tells you bitwise sum, set y to carry &#x3C;&#x3C; 1, continue until y = 0</p>\n<h3>Best time to buy/sell stock</h3>\n<p>keep track of minprice, update max price to be max(profit, curPrice - minprice)</p>\n<h3>Contains duplicate</h3>\n<p>keep numbers in a set, check if val already exists in set</p>\n<h3>Hamming Weight</h3>\n<p>num &#x26; 1, shift n >> 1, repeat 32 times</p>\n<h3>Product of all numbers except self</h3>\n<p>maintain two arrays of running product from left and running product from right, then answer is product of left[i - 1] * right.reverse()[i + 1]</p>\n<p>alt:</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">productExceptSelf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// get length of array</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// Initiailze ans to store the result</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// we know that the product of any element in nums = </span>\n        <span class=\"token comment\">// product[left elements] * product[right elements]</span>\n        <span class=\"token comment\">// we need to compute the right product of each index of nums</span>\n        <span class=\"token comment\">// and just use ans to store this temporary result. </span>\n        <span class=\"token comment\">// Base Case : Since right produce of the right most element is 1. </span>\n        ans<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// for each remaining elements compute right product.</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span><span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// left product can be tracked using a single pointer and </span>\n        <span class=\"token comment\">// updating it with every iteration.</span>\n        <span class=\"token keyword\">int</span> lp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&#x3C;</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// replace right product in ans with both left and right products. </span>\n            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lp <span class=\"token operator\">*</span> ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n            lp <span class=\"token operator\">=</span> lp <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Counting Bits</h3>\n<p>number of bits in ABCD = number of bits in ABC + number of bits in D</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">arr[i] = arr[i &#x26;gt;&#x26;gt;&#x26;gt; 1] + (i &#x26;amp; 1)</code></pre></div>\n<h3>Climb Stairs</h3>\n<p>recursion + memoization</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">climbStairs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">return</span> cache<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Clone Graph</h3>\n<p>DFS</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">cloneGraph</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nodeClones <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> toVisit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>toVisit<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> curr <span class=\"token operator\">=</span> toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword control-flow\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword control-flow\">if</span><span class=\"token punctuation\">(</span>nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                toVisit<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>nodeClones<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">neighbors</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword control-flow\">return</span> nodeClones<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Reverse a Linked List</h3>\n<p>Maintain pointers to tail, oldHead, newHead. Draw a diagram</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">curr <span class=\"token operator\">=</span> a\nnewHead <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\noldHead <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span>\n<span class=\"token keyword control-flow\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">&#x26;&#x26;</span> curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    newHead <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">;</span>\n    curr<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span><span class=\"token punctuation\">;</span>\n    newHead<span class=\"token punctuation\">.</span><span class=\"token property-access\">next</span> <span class=\"token operator\">=</span> oldHead<span class=\"token punctuation\">;</span>\n    oldHead <span class=\"token operator\">=</span> newHead<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">return</span> newHead<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Set Matrix Zeroes</h3>\n<p>use first row/col as indicator whether row/col should be made zero. Keep track of whether the first col/row should be made zero. Create helper functions to make row/col by index zero.</p>\n"}},"__N_SSG":true}