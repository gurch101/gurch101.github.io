{"pageProps":{"post":{"id":"jpa","title":"Hibernate and JPA","category":"summary","description":"Udemy course notes","type":"notes","date":"Sat May 28 2022","contentHtml":"<p>JDBC required writing your own query, connection management, and mapping logic. In spring boot, <code>JdbcTemplate</code> with <code>BeanPropertyRowMapper</code> does all of this.</p>\n<p>The Java Persistence API uses annotated entity classes mapped to your database to automatically write queries for you, jpql, criteria queries, or native queries. Hibernate is the most popular implementation of JPA.</p>\n<p>JPA buddy can autogenerate migrations from entities and provide diffs between migrations + entities. Also can help manage fields on entities. Also can generate query names for spring data repository methods and extract JPQL from method names.</p>\n<h3>Spring Data JDBC</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonDao</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Autowired</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JdbcTemplate</span> jdbcTemplate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from person\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanPropertyRowMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">queryForObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from person where id=?\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BeanPropertyRowMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from person where id=?\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into person (id, name, location, birth_date) VALUES(?, ?, ?, ?)\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timestamp</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> jdbcTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update  person set name=?, location=?, birth_date=? where id = ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Timestamp</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Hibernate and JPA</h3>\n<p>Entity</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span> <span class=\"token comment\">// hibernate triggers a schema update by default. CREATE TABLE not needed via schema.sql</span>\n<span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"people\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// only needed if entity name doesnt match db table name - provided name is lower case + snake case</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@NamedQuery</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"find_all_persons\"</span><span class=\"token punctuation\">,</span> query <span class=\"token operator\">=</span> <span class=\"token string\">\"select p from Person p\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Id</span>\n  <span class=\"token annotation punctuation\">@GeneratedValue</span> <span class=\"token comment\">// adds a sequence to the db</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// insertable = false means JPA won't send this column on insert</span>\n  <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"fullname\"</span><span class=\"token punctuation\">,</span> nullable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> unique <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> insertable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> updateable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Repository</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token annotation punctuation\">@Transactional</span> <span class=\"token comment\">// typically done at the service layer. Any methods that manipulate data require a transaction scope.</span>\n               <span class=\"token comment\">// any JPA managed entity inside of a transaction is automatically synced at the end of the transaction (ie no need to call persist/merge)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonJpaRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@PersistenceContext</span>\n  <span class=\"token class-name\">EntityManager</span> entityManager<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">upsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// can be used to update or merge - if there is an id, it will update, else insert - issues a select followed by an insert/update</span>\n    <span class=\"token keyword\">return</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// persist only assigns an id to the user, it isn't committed until the transaction is committed on method complete</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">TypedQuery</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> namedQuery <span class=\"token operator\">=</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNamedQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find_all_persons\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> namedQuery<span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllJPQL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT p from Person p\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> entityManager<span class=\"token punctuation\">.</span><span class=\"token function\">createNativeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * from person\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>application.properties:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\"># load data.sql AFTER jpa creates all tables\nspring.jpa.defer-datasource-initialization=true</code></pre></div>\n<h3>Entity Manager</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\">em<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// synchronize all changes with db - requires a transaction; a flush can still be rolled back on failure</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// make all managed entities unmanaged - any changes made to entity object are not synchronized after clear is called</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span> <span class=\"token comment\">// detach specific entity</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span> <span class=\"token comment\">// repace entity contents with values in db</span>\n</code></pre></div>\n<h3>JPQL</h3>\n<p>Query using entities instead of db tables.</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> courses <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT c from Course c where name like '%foo'\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Course</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>Relationships</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Course</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Id</span>\n  <span class=\"token annotation punctuation\">@GeneratedValue</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"course\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// lazy fetch by default</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Review</span><span class=\"token punctuation\">></span></span> reviews <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@ManyToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"courses\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ensures 1 m2m table called student_courses is created. If mappedBy wasn't specified, you'd end up with two join tables.</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Review</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Id</span>\n  <span class=\"token annotation punctuation\">@GeneratedValue</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@ManyToOne</span> <span class=\"token comment\">// adds course_id field to Review table; eager fetched by default</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Course</span> course<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Id</span>\n  <span class=\"token annotation punctuation\">@GeneratedValue</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@OneToOne</span> <span class=\"token comment\">// the student table will have a passport_id field; by default this is nullable and eager fetched with a left outer join; if optional is false, then inner join</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Passport</span> passport<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@ManyToMany</span>\n  <span class=\"token annotation punctuation\">@JoinTable</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"student_course\"</span><span class=\"token punctuation\">,</span> joinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"student_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inverseJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"course_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> courses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Passport</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Id</span>\n  <span class=\"token annotation punctuation\">@GeneratedValue</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>fetch<span class=\"token operator\">=</span><span class=\"token class-name\">FetchType</span><span class=\"token punctuation\">.</span>LAZY<span class=\"token punctuation\">,</span> mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"passport\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// mappedBy ensures passport won't have a student_id field</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>To add a <code>Review</code>:</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Course</span> c <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>primaryKey<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// getReference doesn't actually execute a query; if it doesnt exist, the persist will through a referential integrity contraint exception</span>\n<span class=\"token class-name\">Review</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Review</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">setCourse</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>To enroll a student in a course</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Course</span> c <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>primaryKey<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudent<span class=\"token punctuation\">.</span><span class=\"token function\">addCourse</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nem<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this triggers select * on all courses, delete on each course, the insert of each course</span>\n</code></pre></div>\n<h3>Lazy Loading</h3>\n<p>set <code>fetch = FetchType.LAZY</code> on any association to lazy load it. Be sure to exclude it from <code>toString()</code>. If the entity is fetched from within a transaction, calling <code>getAssociation()</code> will fetch the association on-demand (ie a second query) as opposed to in a single query with a join. <code>*ToOne</code> is always eager fetched.</p>\n<h3>Transactions</h3>\n<p><code>@Transactional</code> creates a persistence context (all entities in scope are managed; lazy joins are fetched on-demand). The transaction is committed after the method completes. Calling <code>setField()</code> will be persisted without explicitly calling <code>persist()</code>. Transactions are required for inserts/updates. Read only methods need transactions for lazy joins (the entitymanager has a default transaction, but calling <code>getAssociation()</code> isn't using the entity manager - results in <code>LazyInitializationException</code>).</p>\n<p>Atomicity - changes are all-or-nothing\nConsistency - system remains in a consistent state (ie if you withdraw 50, you need to deposit 50 somewhere else)\nIsolation - changes in one transaction don't impact another transaction\nDurability - data is persisted/rolled back on failure</p>\n<p>Dirty reads - one transaction reading a value that is modified by another incomplete transaction (account with 300, two transactions, t1 withdraws 100 (200), t2 withdraws 50 (150), t1 fails and rolls back to 300 even though t2 was successful)</p>\n<p>Non-repeatable reads - reading the same record multiple times can result in different values if another transaction updates it</p>\n<p>Phantom reads - running a range query can return a different number of records if another transaction inserts/deletes a record</p>\n<p>Use springs transactional over javax transactional to ensure the transaction spans across multiple db's/mq's</p>\n<h5>Isolation levels</h5>\n<p>Read uncommitted - can read regardless of transaction commit - no locks - dirty reads, non-repeatable reads, and phantom reads are possible</p>\n<p>Read committed - modified rows are locked - dirty reads not possible &#x3C;- default for postgresql</p>\n<p>Repeatable read - modified rows and read rows are locked - dirty reads and non-repeatable reads not possible &#x3C;- default for mysql</p>\n<p>Serializable - all records that match the where clause on a select are locked (including future records) - dirty reads, non-repeatable reads, and phantom reads are not possible</p>\n<h3>Spring Data JPA</h3>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// provides basic crud operations - JpaRepository extends Crud/SortPageable/QueryByExample Repos</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CourseRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Sorting:</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Sort</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Sort<span class=\"token punctuation\">.</span>Direction</span><span class=\"token punctuation\">.</span>DESC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Pagination:</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">PageRequest</span> pageRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span>zero<span class=\"token operator\">-</span>based<span class=\"token operator\">-</span>page<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span>size<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> firstPage <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>pageRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfirstPage<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Custom queries:</p>\n<p>add methods to the repository interface</p>\n<div class=\"remark-highlight\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">countByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByNameAndDescription</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByNameOrderByIdDesc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">deleteByName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jpql or native query or named query\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">Course</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">someCustomName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> namedParam1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> namedParam2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Spring Data REST</h3>\n<p>Add <code>@RepositoryRestResource(path=\"courses\")</code> to the repository. Add <code>@JsonIgnore</code> to entity fields you don't want to expose/return.</p>\n<h3>H2 Setup</h3>\n<p>in application.properties:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">spring.datasource.url=jdbc:h2:mem:testdb</code></pre></div>\n<p>When running, goto <code>/h2-console</code> to connect to an admin panel</p>\n<p>Spring boot will automatically run <code>src/main/resources/schema.sql</code> to create the schema for JPA-managed entites and <code>src/main/resources/data.sql</code> to populate it. If using a migration tool, do not use these files.</p>\n<h3>Questions</h3>\n<p>How to remove h2 for prod build</p>\n<p>jsonb for h2</p>\n<p>spring data jdbc joins + transactions</p>\n<p>why does jpa need to find entity before deleting it?</p>\n<p>flush in a transaction that throws an exception? it undoes it</p>\n<p>review join types</p>\n<p>implication of collection type in java on jpa</p>\n<p>if you add addToCollection method on entity, will it allow persisting the parent-child entity together in one save call?</p>\n<p>m2m with data (studentcourse.grade) - how to get courses</p>\n"}},"__N_SSG":true}