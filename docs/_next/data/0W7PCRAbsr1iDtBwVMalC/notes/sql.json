{"pageProps":{"post":{"id":"sql","title":"SQL Summary","category":"summary","description":"SQL cheat sheet and summary","type":"notes","date":"Sun Mar 01 2020","contentHtml":"<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> movies<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">year</span> <span class=\"token keyword\">from</span> movies <span class=\"token keyword\">where</span> <span class=\"token keyword\">year</span> <span class=\"token operator\">&#x3C;=</span> <span class=\"token number\">2010</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> movies <span class=\"token keyword\">where</span> title <span class=\"token operator\">like</span> <span class=\"token string\">\"Toy Story%\"</span> <span class=\"token comment\"># begins query</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> movies <span class=\"token keyword\">where</span> title <span class=\"token operator\">like</span> <span class=\"token string\">\"Toy Story _\"</span> <span class=\"token comment\"># any single character</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> director <span class=\"token keyword\">FROM</span> movies <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> director<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> movies <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> title <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">5</span> <span class=\"token keyword\">OFFSET</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> movies <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> boxoffice <span class=\"token keyword\">ON</span> movies<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> boxoffice<span class=\"token punctuation\">.</span>movie_id <span class=\"token keyword\">WHERE</span> boxoffice<span class=\"token punctuation\">.</span>international_sales <span class=\"token operator\">></span> boxoffice<span class=\"token punctuation\">.</span>domestic_sales<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> movies <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> boxoffice <span class=\"token keyword\">ON</span> movies<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> boxoffice<span class=\"token punctuation\">.</span>movie_id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> boxoffice<span class=\"token punctuation\">.</span>rating <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># find all buildings that have employees</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">distinct</span><span class=\"token punctuation\">(</span>building_name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> buildings <span class=\"token keyword\">join</span> employees <span class=\"token keyword\">on</span> buildings<span class=\"token punctuation\">.</span>building_name <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span>building<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># list all buildings and distinct employee roles including empty buildings</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">distinct</span> building_name<span class=\"token punctuation\">,</span> role <span class=\"token keyword\">FROM</span> buildings <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> employees <span class=\"token keyword\">on</span> buildings<span class=\"token punctuation\">.</span>building_name <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span>building<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># find all employees not assigned a building</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> role <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">WHERE</span> building <span class=\"token operator\">IS</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># find all buildings that hold no employees</span>\n<span class=\"token keyword\">SELECT</span> building_name <span class=\"token keyword\">FROM</span> buildings <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> employees <span class=\"token keyword\">on</span> employees<span class=\"token punctuation\">.</span>building <span class=\"token operator\">=</span> buildings<span class=\"token punctuation\">.</span>building_name <span class=\"token keyword\">where</span> building <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># find the average years employed for each role</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>years_employed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> role<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># find the number of employees for each role</span>\n<span class=\"token keyword\">SELECT</span> role<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> role<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># find total sales for each director</span>\n<span class=\"token keyword\">SELECT</span> director<span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>domestic_sales <span class=\"token operator\">+</span> international_sales<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> movies <span class=\"token keyword\">JOIN</span> boxoffice <span class=\"token keyword\">ON</span> boxoffice<span class=\"token punctuation\">.</span>movie_id <span class=\"token operator\">=</span> movies<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> Director<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Order of Execution</h3>\n<ul>\n<li>FROM/JOIN</li>\n<li>WHERE</li>\n<li>GROUP BY</li>\n<li>HAVING</li>\n<li>SELECT</li>\n<li>DISTINCT</li>\n<li>ORDER BY</li>\n<li>LIMIT/OFFSET</li>\n</ul>\n<h3>Creating Tables</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> cities <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  country <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  population <span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span>\n  area <span class=\"token keyword\">INTEGER</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Inserting Data</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> cities <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> country<span class=\"token punctuation\">,</span> population<span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">VALUES</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'Delhi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'India'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">'Shanghai'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'China'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22125000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4015</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Querying Data</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> cities<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> country <span class=\"token keyword\">FROM</span> cities<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> population <span class=\"token operator\">/</span> area <span class=\"token keyword\">AS</span> population_density <span class=\"token keyword\">FROM</span> cities<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> name <span class=\"token operator\">||</span> <span class=\"token string\">', '</span> <span class=\"token operator\">||</span> country <span class=\"token keyword\">AS</span> location <span class=\"token keyword\">FROM</span> cities<span class=\"token punctuation\">;</span> <span class=\"token comment\">// equivalent to CONCAT(name, ', ', country)</span>\n\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> area <span class=\"token keyword\">FROM</span> cities <span class=\"token keyword\">WHERE</span> area <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">2000</span> <span class=\"token operator\">AND</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> area <span class=\"token keyword\">FROM</span> cities <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Delhi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Shanghai'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> population <span class=\"token operator\">/</span> area <span class=\"token keyword\">AS</span> population_density <span class=\"token keyword\">FROM</span> cities <span class=\"token keyword\">WHERE</span> population <span class=\"token operator\">/</span> area <span class=\"token operator\">></span> <span class=\"token number\">6000</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>String functions</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\">CONCAT <span class=\"token comment\">// can also use ||</span>\nLOWER\nUPPER\nLENGTH\n</code></pre></div>\n<h3>Comparison Operators</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- can add ALL/ANY modifier</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">>=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x3C;=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x3C;></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!=</span>\n<span class=\"token operator\">IN</span>\n<span class=\"token operator\">NOT</span> <span class=\"token operator\">IN</span>\n<span class=\"token operator\">BETWEEN</span> X <span class=\"token operator\">AND</span> Y\n</code></pre></div>\n<h3>Updating Records</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> cities <span class=\"token keyword\">SET</span> population <span class=\"token operator\">=</span> <span class=\"token number\">39505000</span> <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Tokyo'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Deleting Rows</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> cities <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Tokyo'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Relationships</h3>\n<p>a user has many photos (one-to-many). Many photos belong to a user (many-to-one).</p>\n<p>A company has one CEO. A CEO works at one company (one-to-one).</p>\n<p>Students are enrolled in many classes. Classes have many students (many-to-many).</p>\n<p>The \"many\" side of the relationship gets the foreign key column</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> users <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- postgres will autogenerate serial; doesn't need to be specified on INSERT</span>\n  username <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> photos <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- 1 to 2^31, auto increments</span>\n  url <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  user_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> users<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- attempting to insert a record with an invalid user_id will trigger fkey violation constraint</span>\n                                       <span class=\"token comment\">-- NULL is allowed by default</span>\n                                       <span class=\"token comment\">-- user_id INTEGER REFERENCES users(id) ON DELETE CASCADE - if user is deleted, photo associated with user is also deleted</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> photos <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> photos <span class=\"token keyword\">JOIN</span> users <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> photos<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Delete Constraints</h3>\n<p><code>ON DELETE RESTRICT</code> prevent deletion if fkey columns reference record. Default behavior.</p>\n<p><code>ON DELETE NO ACTION</code> prevent deletion if fkey columns reference record</p>\n<p><code>ON DELETE CASCADE</code> delete records that have fkey relationship too</p>\n<p><code>ON DELETE SET NULL</code></p>\n<p><code>ON DELETE SET DEFAULT</code></p>\n<h3>Joins</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- find all comment author names and comment content</span>\n<span class=\"token keyword\">SELECT</span> contents<span class=\"token punctuation\">,</span> username\n<span class=\"token keyword\">FROM</span> comments\n<span class=\"token keyword\">JOIN</span> users <span class=\"token keyword\">ON</span> users<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> comments<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- find all comment contents and photo urls associated with the comment</span>\n<span class=\"token keyword\">SELECT</span> comments<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">AS</span> comment_id<span class=\"token punctuation\">,</span> contents<span class=\"token punctuation\">,</span> photo_url\n<span class=\"token keyword\">FROM</span> comments\n<span class=\"token keyword\">JOIN</span> photos p <span class=\"token keyword\">ON</span> p<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> comments<span class=\"token punctuation\">.</span>photo_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- find all users that comment on their own photos</span>\n<span class=\"token keyword\">SELECT</span> username\n<span class=\"token keyword\">FROM</span> users\n<span class=\"token keyword\">JOIN</span> photos <span class=\"token keyword\">ON</span> photos<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">JOIN</span> comments <span class=\"token keyword\">ON</span> <span class=\"token keyword\">comment</span><span class=\"token punctuation\">.</span>photo_id <span class=\"token operator\">=</span> photos<span class=\"token punctuation\">.</span>id <span class=\"token operator\">AND</span> comments<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>FROM/JOIN order matters for left/right joins.</p>\n<h3>Join Types</h3>\n<p>Inner join - matches rows from first table with the second table to create a row with combined columns from both tables. Only contains data that exists in both tables. Default join type.</p>\n<p>Left join - include row from first table regardless of whether a matching row is found in second table</p>\n<p>Right join - include row from second table regardless of whether a matching row is found in first table</p>\n<p>full join - include rows from both tables regardless of whether a matching row exists in either.</p>\n<p>sometimes left/right/full join is written as left outer/right outer/full outer but that is equivalent to short form.</p>\n<h3>Aggregates</h3>\n<p>COUNT/MIN/MAX/AVG/SUM</p>\n<p>use GROUP BY agg col to apply aggregate function to groups of data by grouping rows that have the same value as the column specified. Group by is executed after the where clause. can using HAVING to filter grouped rows.</p>\n<p>null values are not included in COUNT. To include them, use COUNT(*).</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- returns all unique user_ids</span>\n<span class=\"token comment\">-- can only select grouped columns or aggregate values</span>\n<span class=\"token keyword\">SELECT</span> user_id\n<span class=\"token keyword\">FROM</span> comments\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> comments<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- returns number of comments a user has made</span>\n<span class=\"token comment\">-- can apply aggregate function within a group</span>\n<span class=\"token keyword\">SELECT</span> user_id<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_comments_created\n<span class=\"token keyword\">FROM</span> comments\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> comments<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> authors<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> authors\n<span class=\"token keyword\">JOIN</span> books <span class=\"token keyword\">ON</span> books<span class=\"token punctuation\">.</span>author_id <span class=\"token operator\">=</span> authors<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> authors<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- find all photos with more than 2 comments where the photo_id &#x3C; 3</span>\n<span class=\"token keyword\">SELECT</span> photo_id<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> comments\n<span class=\"token keyword\">WHERE</span> photo_id <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">3</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> comments<span class=\"token punctuation\">.</span>photo_id <span class=\"token keyword\">HAVING</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- find all manufacturers that sold more than 200000 total revenue</span>\n<span class=\"token keyword\">SELECT</span> manufacturer<span class=\"token punctuation\">,</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> units_sold<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> phones\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> manfacturer <span class=\"token keyword\">HAVING</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> units_sold<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">200000</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Sorting</h3>\n<p>default is ascending. Add DESC to make descending.</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- sort by ascending price and descending weight</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Offset and Limit</h3>\n<p>Offset = skip the first N rows in the result set</p>\n<p>Limit = return N records from result set</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- get the names of the second and third most expensive phones</span>\n<span class=\"token keyword\">SELECT</span> name\n<span class=\"token keyword\">FROM</span> phones\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span>\n<span class=\"token keyword\">LIMIT</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">OFFSET</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Unions and Intersections</h3>\n<p>UNION\nUNION ALL\nINTERSECT\nINTERSECT ALL\nEXCEPT\nEXCEPT ALL</p>\n<p>set methods require same columns in all queries</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- get the 4 most expensive products and the 4 highest price / weight products</span>\n<span class=\"token comment\">-- if you want to get dups, do UNION ALL</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">FROM</span> products\n  <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token keyword\">DESC</span>\n  <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token comment\">-- INTERSECT will return products that are in the top 4 most expensive AND in the top 4 highest price / weight products</span>\n<span class=\"token comment\">-- EXCEPT will return products that are in the top 4 most expensive but not in the top 4 highest price / weight products</span>\n<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">FROM</span> products\n  <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> price <span class=\"token operator\">/</span> weight <span class=\"token keyword\">DESC</span>\n  <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>Subqueries</h3>\n<p>inner query is executed first. Always think about shape of data.</p>\n<p>Subquery in select statement should return a single value</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- list name of products that are more expensive than all products in the toys department</span>\n<span class=\"token keyword\">SELECT</span> name\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">WHERE</span> department <span class=\"token operator\">=</span> <span class=\"token string\">'toys'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- list the name, price, and price ratio relative to the most expensive product</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> price <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> max_price_ratio <span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">></span> <span class=\"token number\">867</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- subquery in from clause must have alias</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> price_weight_ratio <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> price <span class=\"token operator\">/</span> weight <span class=\"token keyword\">as</span> price_weight_ratio <span class=\"token keyword\">FROM</span> product<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> p <span class=\"token keyword\">WHERE</span> price_weight_ratio <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- subquery in from clause can also return a single value</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> max_price <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> p<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get average number of orders for all users</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> ct <span class=\"token keyword\">FROM</span> orders <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> user_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> o<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get the highest average phone price by manufacturer</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>avg_prc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> max_average_price\n<span class=\"token keyword\">FROM</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> avg_prc\n  <span class=\"token keyword\">FROM</span> phones\n  <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> manufacturer\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get the first name of all users that ordered a specific product</span>\n<span class=\"token keyword\">SELECT</span> first_name\n<span class=\"token keyword\">FROM</span> users\n<span class=\"token keyword\">JOIN</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> user_id <span class=\"token keyword\">FROM</span> orders <span class=\"token keyword\">WHERE</span> product_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> o\n<span class=\"token keyword\">ON</span> o<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get all orders that involve a product with price/weight ratio > 5</span>\n<span class=\"token keyword\">SELECT</span> id\n<span class=\"token keyword\">FROM</span> orders\n<span class=\"token keyword\">WHERE</span> product_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> id <span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">/</span> weight <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get all products that have a price greater than the average price of all products</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get name of products that are more expensive than all products in the 'Industrial' department</span>\n<span class=\"token keyword\">SELECT</span> name\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">></span> <span class=\"token keyword\">ALL</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> price <span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">WHERE</span> department <span class=\"token operator\">=</span> <span class=\"token string\">'Industrial'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--- get name, department, and price of the most expensive product in each department</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">,</span> price\n<span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">AS</span> p1\n<span class=\"token keyword\">WHERE</span> price <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">AS</span> p2 <span class=\"token keyword\">WHERE</span> p2<span class=\"token punctuation\">.</span>department <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get number of orders for each product; join/group by would be more efficient</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> orders <span class=\"token keyword\">AS</span> o <span class=\"token keyword\">WHERE</span> o<span class=\"token punctuation\">.</span>product_id <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_orders\n<span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">AS</span> p1\n\n<span class=\"token comment\">-- get ratio of max price and avg price</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">AVG</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Distinct</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- get all unique departments</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> department <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get all unique department, product name pairs</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> department<span class=\"token punctuation\">,</span> name <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get number of unique departments</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">DISTINCT</span> department<span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Utility Functions</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- get the shipping cost of a product where the cost is the larger of the weight * $2 or $30</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> GREATEST<span class=\"token punctuation\">(</span>weight <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get the sale price of a product</span>\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> LEAST<span class=\"token punctuation\">(</span>price <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">CASE</span>\n    <span class=\"token keyword\">WHEN</span> price <span class=\"token operator\">></span> <span class=\"token number\">600</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'high'</span>\n    <span class=\"token keyword\">WHEN</span> price <span class=\"token operator\">></span> <span class=\"token number\">300</span> <span class=\"token keyword\">THEN</span> <span class=\"token string\">'medium'</span>\n    <span class=\"token keyword\">ELSE</span> <span class=\"token string\">'cheap'</span> <span class=\"token comment\">-- if no ELSE, default is NULL</span>\n  <span class=\"token keyword\">END</span>\n<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Data Types</h3>\n<p>data type categories: numbers, currency, binary, date/time, character, json, geometric, range, arrays, boolean, xml, uuid</p>\n<p>Rules:</p>\n<ul>\n<li>id column should be SERIAL</li>\n<li>number without decimal - use INTEGER</li>\n<li>precise amounts with decimal - use NUMERIC</li>\n<li>numbers with decimal - use DOUBLE PRECISION</li>\n</ul>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- can cast with ::datatype</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span>::<span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- first three characters</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'fooobar'</span>::<span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">SELECT</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'NOV-20-1980 1:24 AM EST'</span>::<span class=\"token keyword\">TIMESTAMP</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">TIME</span> ZONE<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'1 day'</span>::<span class=\"token keyword\">INTERVAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>CHAR(N) - store N characters; pad with space\nVARCHAR - store arbitrary length string\nVARCHAR(N) - store up to N characters, no space\nTEXT - store arbitrary length string</p>\n<p>boolean type:\ntrue, 'yes', 'on', 1, 't', 'y' evaluate to true\nfalse 'no', 'off', 0, 'f', 'n' evaluate to false\nnull</p>\n<p>date/time\ncan provide almost any date/time format string and store it as yyyy-mm-dd and HH:MM:SS</p>\n<p>DATE\nTIME (WITH/WITHOUT TIME ZONE)\nTIMESTAMP (WITH/WITHOUT TIME ZONE)\nINTERVAL</p>\n<h3>Validations</h3>\n<p>NULL</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- in create table</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  price <span class=\"token keyword\">INTEGER</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- after table created; you need to ensure current state of table meets constraint</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> products\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">COLUMN</span> price\n<span class=\"token keyword\">SET</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>DEFAULT</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- in create table</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  price <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">999</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- after table created</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> products\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">COLUMN</span> price\n<span class=\"token keyword\">SET</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">999</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>UNIQUE</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- in create table</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNIQUE</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- after table created; you need to ensure current state of table meets constraint</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> products\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> products\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">CONSTRAINT</span> products_name_key<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- in create table</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  name <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  department <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">UNIQUE</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> products\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> department<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>comparison validation</p>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- in create table</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> products<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  price <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- after table created; you need to ensure current state of table meets constraint</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> products\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>price <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> orders<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n  created_at <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  est_delivery <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span>created_at <span class=\"token operator\">&#x3C;</span> est_delivery<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- check for enum could be CHECK (color IN ('red', 'green', 'blue'))</span>\n</code></pre></div>\n<h3>Instagram schema</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> users<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span>\n  created_at <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n  updated_at <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n  username <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> posts <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  created_at <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n  updated_at <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n  url <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  user_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> users<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> comments <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  created_at <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n  updated_at <span class=\"token keyword\">TIMESTAMP</span><span class=\"token punctuation\">,</span>\n  contents <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  post_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> posts<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  user_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> users<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> post_likes <span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  user_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> users<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  post_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> posts<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">UNIQUE</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> post_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- number of likes on a specific post</span>\n<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> post_likes <span class=\"token keyword\">WHERE</span> post_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get the post ids of the top 5 liked posts</span>\n<span class=\"token keyword\">SELECT</span> posts<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">FROM</span> posts <span class=\"token keyword\">JOIN</span> post_likes <span class=\"token keyword\">ON</span> post_likes<span class=\"token punctuation\">.</span>post_id <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> posts<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DESC</span> <span class=\"token keyword\">LIMIT</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get the username of people whole like a specific post</span>\n<span class=\"token keyword\">SELECT</span> username <span class=\"token keyword\">FROM</span> users <span class=\"token keyword\">JOIN</span> post_likes <span class=\"token keyword\">ON</span> post_likes<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">WHERE</span> post_likes<span class=\"token punctuation\">.</span>post_id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- get the urls of posts that user with a specific id liked</span>\n<span class=\"token keyword\">SELECT</span> url <span class=\"token keyword\">FROM</span> posts <span class=\"token keyword\">JOIN</span> post_likes <span class=\"token keyword\">ON</span> post_likes<span class=\"token punctuation\">.</span>post_id <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span>id <span class=\"token keyword\">WHERE</span> post_likes<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Polymorphic association. Generic like table for posts and comments (no fk; not recommended)</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> likes<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  user_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> users<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  like_id <span class=\"token keyword\">INTEGER</span> <span class=\"token comment\">-- no foreign key</span>\n  liked_type <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- post/comment</span>\n  <span class=\"token keyword\">UNIQUE</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span> post_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- Polymorphic association alternative</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> likes<span class=\"token punctuation\">(</span>\n  id <span class=\"token keyword\">SERIAL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span>\n  user_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> users<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  post_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> posts<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  comment_id <span class=\"token keyword\">INTEGER</span> <span class=\"token keyword\">REFERENCES</span> comments<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">-- coalesce returns the first value that is not null</span>\n  <span class=\"token keyword\">CHECK</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>post_id<span class=\"token punctuation\">)</span>::<span class=\"token keyword\">BOOLEAN</span>::<span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">COALESCE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>comment_id<span class=\"token punctuation\">)</span>::<span class=\"token keyword\">BOOLEAN</span>::<span class=\"token keyword\">INTEGER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- simplest alternative is to create a separate table for each like type. Would require UNION queries for analytics</span>\n</code></pre></div>\n"}},"__N_SSG":true}