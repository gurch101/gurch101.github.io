{"pageProps":{"post":{"id":"typescript","title":"Typescript","category":"summary","description":"Udemy course notes","type":"notes","date":"Sat May 28 2022","contentHtml":"<h3>Types</h3>\n<p>core types: number, string, boolean, object, array</p>\n<p>typescript types: tuple, enum, any, void (will return undefined in js - callbacks that have a void return \"can\" return something but the return will be unused), Function, unknown, never</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// don't need to specify type since typescript infers it</span>\n<span class=\"token keyword\">let</span> someVar<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// specify type if variable declared but not initialized</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">otherAdd</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> n2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\notherAdd <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// types are inferred</span>\n<span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// person.foobar will show error</span>\n\n<span class=\"token comment\">// starts at 0, can assign own number/string</span>\n<span class=\"token keyword\">enum</span> Permission <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">READ_ONLY</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ALL_ACCESS</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// above is preferred; let typescript infer the type</span>\n<span class=\"token class-name\"><span class=\"token keyword\">const</span></span> explicitlyTypedPerson<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  details<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    addr1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  hobbies<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  role<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tuple - fixed length where each element is of a specific type</span>\n  <span class=\"token class-name\">permission</span><span class=\"token operator\">:</span> Permission<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Jane\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  details<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    addr1<span class=\"token operator\">:</span> <span class=\"token string\">\"510 Burrard\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  hobbies<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Sports\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cooking\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  role<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  permission<span class=\"token operator\">:</span> Permission<span class=\"token punctuation\">.</span><span class=\"token constant\">READ_ONLY</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> favoriteActivities<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfavoriteActivities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">inlineObjFunc</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Union Types</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> n1 <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token keyword\">typeof</span> a2 <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> n1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'ab'</span>\n</code></pre></div>\n<h3>Literal Types</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// can only provide val1 or val2 as param</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>someLiteral<span class=\"token operator\">:</span> <span class=\"token string\">\"val1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"val2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Type Aliases</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MyOtherType</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"val1\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"val2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span>myVal<span class=\"token operator\">:</span> MyType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Unknown Type</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> userInput<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> userName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\nuserInput <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nuserInput <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// unknown type requires typechecking; any does not</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> userInput <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  userName <span class=\"token operator\">=</span> userInput<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Never type</h3>\n<p>Use never for functions that always throw, or functions with infinite loops</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// never doesn't ever return anything; void returns undefined</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">generateError</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> errorCode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">{</span> message<span class=\"token punctuation\">,</span> errorCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Classes</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> someOtherProp<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> someConstant <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// don't need to explicitly list properties separate</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>someOtherProp <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// call via Employee.create();</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">,</span>\n      name<span class=\"token punctuation\">,</span>\n      someOtherProp<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Describeable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">abstract</span> <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Department</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Describeable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// default is public</span>\n  <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  withDefault<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span> employees<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// protected can be changed from subclasses</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span>employee<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">validateEmployee</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>employees<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Department: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token function\">validateEmployee</span><span class=\"token punctuation\">(</span>employee<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> employee<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// access as property via dept.name;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> dept <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Department</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my department\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ITDepartment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Department</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> admins<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// super must be called first</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// overrides base class method</span>\n  <span class=\"token function\">addEmployee</span><span class=\"token punctuation\">(</span>employee<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>employee <span class=\"token operator\">!==</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>employees<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> itDepartment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ITDepartment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my it department\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"admin1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingleton</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token operator\">:</span> MySingleton<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// can't call new</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">private</span></span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySingleton<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> MySingleton<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    MySingleton<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> MySingleton<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Interfaces</h3>\n<p>only exists in typescript. Transpilation removes it.</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// type Person = {} will work but not common - interfaces can be implemented; types can't; types are used for aliases/union types</span>\n<span class=\"token comment\">// interface can extend another interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// can't use public/private but can add readonly</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// optional property</span>\n  foo<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// optional method</span>\n  greet<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>phrase<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// can use interface as a function type</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AddFn</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// anonymously defined</span>\n  <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> add<span class=\"token operator\">:</span> AddFn<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>phrase<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> user<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">;</span>\n\nuser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>phrase<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>phrase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Intersection Types</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Admin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  privileges<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Employee</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  startDate<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// similar to interface inheritance. Intersections also work with interfaces. Combines all properties into new type.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ElevatedEmployee</span> <span class=\"token operator\">=</span> Admin <span class=\"token operator\">&#x26;</span> Employee<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Combinable</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Numeric</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Universal is of type number.  Combines all common types.</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Universal</span> <span class=\"token operator\">=</span> Combinable <span class=\"token operator\">&#x26;</span> Numeric<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> e<span class=\"token operator\">:</span> ElevatedEmployee <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">,</span>\n  privileges<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"create-server\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  startDate<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Type Guards</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Truck</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">loadCargo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UnknownEmployee</span> <span class=\"token operator\">=</span> Employee <span class=\"token operator\">|</span> Admin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Vehicle</span> <span class=\"token operator\">=</span> Car <span class=\"token operator\">|</span> Truck<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> UnknownEmployee<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// type guard for interfaces</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"startDate\"</span> <span class=\"token keyword\">in</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>startDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useVehicle</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Vehicle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// for classes you can use instanceof; in also works</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Truck</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">loadCargo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Discriminated Unions</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">;</span>\n  flyingSpeed<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Horse</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"horse\"</span><span class=\"token punctuation\">;</span>\n  runningSpeed<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> Bird <span class=\"token operator\">|</span> Horse<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">moveAnimal</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> speed<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"bird\"</span><span class=\"token operator\">:</span>\n      speed <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>flyingSpeed<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"horse\"</span><span class=\"token operator\">:</span>\n      speed <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>runningSpeed<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>Type Casting</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ! means expression will never return null</span>\n<span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user-input\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span> <span class=\"token keyword\">as</span> HTMLInputElement<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// won't work with jsx files</span>\n<span class=\"token keyword\">const</span> el2 <span class=\"token operator\">=</span> <span class=\"token operator\">&#x3C;</span>HTMLInputElement<span class=\"token operator\">></span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user-input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Index Properties</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ErrorContainer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// object key can be of any string</span>\n  <span class=\"token punctuation\">[</span>prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> errorBag<span class=\"token operator\">:</span> ErrorContainer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"oops\"</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">\"oops2\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Optional Chaining</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> fetchedData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fetchedData<span class=\"token operator\">?.</span>job<span class=\"token operator\">?.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Nullish Coelescing</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> userInput <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// set to default if user input is null or undefined</span>\n<span class=\"token keyword\">const</span> storedData <span class=\"token operator\">=</span> userInput <span class=\"token operator\">??</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Generics</h3>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&#x3C;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eq: string[]</span>\n\n<span class=\"token comment\">// resolve will be passed a string</span>\n<span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// data will be a string</span>\npromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">merge</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>objA<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> objB<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&#x26;</span> <span class=\"token constant\">U</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">,</span> objB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lengthy</span> <span class=\"token punctuation\">{</span>\n  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">countAndDescribe</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Lengthy<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> descriptionText <span class=\"token operator\">=</span> <span class=\"token string\">\"Got no elements\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    descriptionText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Got </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>element<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> elements</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>element<span class=\"token punctuation\">,</span> descriptionText<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">extractAndConvert</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Storage<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> data<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">splce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Storage<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Course</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createCourse</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> desciption<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Course <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> course <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&#x3C;</span>Course<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  course<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n  course<span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> description<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> course <span class=\"token keyword\">as</span> Course<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> names<span class=\"token operator\">:</span> Readonly<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Max'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Anna'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>Decorators</h3>\n<p>add <code>experimentalDecorators: true</code> to tsconfig to enable ES7 decorators</p>\n<p>Decorators are executed on <em>definition</em> of the class, not instantiation</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span>constructor<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Logger</span></span> <span class=\"token comment\">// class decorators are called when the class is defined</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span>logString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>constructor<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>logString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PropertyLogger</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> propertyName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> Symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">MethodLogger</span><span class=\"token punctuation\">(</span>\n  target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> Symbol<span class=\"token punctuation\">,</span>\n  descriptor<span class=\"token operator\">:</span> PropertyDescriptor\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AccessorLogger</span><span class=\"token punctuation\">(</span>\n  target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  descriptor<span class=\"token operator\">:</span> PropertyDescriptor\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// name is the method name</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ParamLogger</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// multiple decorators can be added; they run bottom up</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Logger</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PropertyLogger</span></span> <span class=\"token comment\">//property name will be \"name\", target will be the class definition</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"Max\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">AccessorLogger</span></span> <span class=\"token comment\">// target will be class definiton, name will be \"name\", descriptor will be accessor definition</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">MethodLogger</span></span>\n  <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">ParamLogger</span></span> someVal<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> someVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n"}},"__N_SSG":true}