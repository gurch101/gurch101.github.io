{"pageProps":{"post":{"id":"ml","title":"Machine Learning Notes","category":"notes","description":"Machine Learning Notes","type":"notes","date":"Thu Jan 14 2021","contentHtml":"<h1>Machine Learning</h1>\n<h3>Decision Trees</h3>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>tree <span class=\"token keyword\">import</span> DecisionTreeRegressor\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_absolute_error\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> train_test_split\n\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># get percentiles, mean, std of each column</span>\ndata<span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># list all columns</span>\ndata<span class=\"token punctuation\">.</span>columns\n\n<span class=\"token comment\"># get predictive column</span>\ny <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>Price\n\n<span class=\"token comment\"># get features</span>\nX <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'Rooms'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bathroom'</span><span class=\"token punctuation\">.</span> <span class=\"token string\">'Landsize'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># show first bunch of rows</span>\nX<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ntrain_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y <span class=\"token operator\">=</span> train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> random_state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_mae</span><span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token punctuation\">,</span> train_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># random_state ensures same results for each run, max_leaf_nodes is used to control tree depth</span>\n    <span class=\"token comment\"># too deep = overfitting, too shallow = underfitting</span>\n    model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max_leaf_nodes<span class=\"token operator\">=</span>max_leaf_nodes<span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>\n    preds_val <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># abs(predicted - actual) / N</span>\n    mae <span class=\"token operator\">=</span> mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span> preds_val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>mae<span class=\"token punctuation\">)</span>\n\ncandidate_max_leaf_nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\"># Write loop to find the ideal tree size from candidate_max_leaf_nodes</span>\nscores <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> leaf_size<span class=\"token punctuation\">:</span> get_mae<span class=\"token punctuation\">(</span>leaf_size<span class=\"token punctuation\">,</span> train_X<span class=\"token punctuation\">,</span> val_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">,</span> val_y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> leaf_size <span class=\"token keyword\">in</span> candidate_max_leaf_nodes<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Store the best value of max_leaf_nodes (it will be either 5, 25, 50, 100, 250 or 500)</span>\nbest_tree_size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>scores<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># now that all param decisions are made, fit to entire dataset</span>\nfinal_model <span class=\"token operator\">=</span> DecisionTreeRegressor<span class=\"token punctuation\">(</span>max_leaf_nodes<span class=\"token operator\">=</span>best_tree_size<span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nfinal_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n</code></pre></div>\n<h3>Random Forests</h3>\n<p>A random forest uses many trees and makes predictions by averaging the prediction of each tree</p>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>ensemble <span class=\"token keyword\">import</span> RandomForestRegressor\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> mean_absolute_error\n\nforest_model <span class=\"token operator\">=</span> RandomForestRegressor<span class=\"token punctuation\">(</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nforest_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>train_X<span class=\"token punctuation\">,</span> train_y<span class=\"token punctuation\">)</span>\nmelb_preds <span class=\"token operator\">=</span> forest_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>val_X<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mean_absolute_error<span class=\"token punctuation\">(</span>val_y<span class=\"token punctuation\">,</span> melb_preds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>I/O</h3>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\noutput <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Id'</span><span class=\"token punctuation\">:</span> test_data<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span>\n                       <span class=\"token string\">'SalePrice'</span><span class=\"token punctuation\">:</span> test_preds<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\noutput<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'submission.csv'</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3>Pandas</h3>\n<div class=\"remark-highlight\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n\n<span class=\"token comment\"># table with two rows, columns YES and NO</span>\n<span class=\"token comment\"># index is the row label, if not provided, uses 0...n-1 by default</span>\npd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'Yes'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'No'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">131</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Product 1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Product 2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># sequence/list of values, can be thought of as single column</span>\npd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'2015 sales'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2016 sales'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Product Sales'</span><span class=\"token punctuation\">)</span>\n\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/csv.csv'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token operator\">&#x3C;</span><span class=\"token number\">0</span> to n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># (&#x3C;rows>, &#x3C;columns>)</span>\ndata<span class=\"token punctuation\">.</span>shape\n\ndata<span class=\"token punctuation\">.</span>to_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'path/to/write.csv'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># column access</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'column name'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># row access</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'column name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># first three rows of first column</span>\ndata<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># first three rows of column name</span>\ndata<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'column name'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># all rows for n columns</span>\ndata<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'col1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'col2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># change the index</span>\ndata<span class=\"token punctuation\">.</span>set_index<span class=\"token punctuation\">(</span><span class=\"token string\">'col1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># querying</span>\ndata<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'foobar'</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'colX'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>val1<span class=\"token punctuation\">,</span> val2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'colN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>notnull<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">'col2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token operator\">|</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'col3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># assignment</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'FOO'</span>\n\n<span class=\"token comment\"># if numerical, shows percentiles</span>\n<span class=\"token comment\"># if string, shows uniques, top, count</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>describe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># frequency table</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># alt for above</span>\ndata<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># returns all unique values in col</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>unique<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># doesnt mutate existing data frame</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> v<span class=\"token punctuation\">:</span> v <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># equiv to above</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># the index of the row with the max col name</span>\ndata<span class=\"token punctuation\">[</span><span class=\"token string\">'col name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># calls func_name with row</span>\n<span class=\"token comment\"># if axis='index', calls func_name for each column</span>\n<span class=\"token comment\"># returns new dataframe, doesn't mutate existing</span>\ndata<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>func_name<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token string\">'columns'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># min price for each point category</span>\nreviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># best wine for country/province</span>\nreviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'province'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> df<span class=\"token punctuation\">:</span> df<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span>df<span class=\"token punctuation\">.</span>points<span class=\"token punctuation\">.</span>idxmax<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nreviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># make multi-index back to single index</span>\ncountries_reviewed <span class=\"token operator\">=</span> reviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'province'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ncountries_reviewed <span class=\"token operator\">=</span> countries_reviewed<span class=\"token punctuation\">.</span>reset_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncountries_reviewed<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token string\">'len'</span><span class=\"token punctuation\">,</span> ascending<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\ncountries_reviewed<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span>by<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">'country'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'len'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nbest_rating_per_price <span class=\"token operator\">=</span> reviews<span class=\"token punctuation\">.</span>groupby<span class=\"token punctuation\">(</span><span class=\"token string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'points'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sort_index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>next:\nhttps://developers.google.com/machine-learning/crash-course</p>\n<p>https://course.fast.ai/</p>\n"}},"__N_SSG":true}